//This constructor was apparently used by the original JNeat to
//begin evolution with a random population.  It is NEAT-specific
//because it uses inputs and outputs, but it doesn't appear
//to be used anywhere in the code anymore, so I moved it to dep.

	/**
	 * Special constructor to create a population of random topologies uses
	 * Genome (int i, int o, int n,int nmax, bool r, double linkprob) See the
	 * Genome constructor for the argument specifications the parameter are :
	 * size = number of organisms i = number of inputs o = number of output nmax
	 * = max index of nodes r = the net can be recurrent ? linkprob =
	 * probability of connecting two nodes.
	 */
	public Population(int numberOfOrganisms, int numberOfInputs, int numberOfOutputs, int maxIndexOfNodes, boolean recurrent, double linkProbability) {

		logger.info("Making a random population of " + numberOfOrganisms + " organisms");

		winnergen = 0;
		highest_fitness = 0.0;
		highest_last_changed = 0;
		organisms = new ArrayList<IOrganism>(numberOfOrganisms);
		
		for (int count = 0; count < numberOfOrganisms; count++) {
			IGenome genome = new NeatGenome(count, numberOfInputs, numberOfOutputs, RandomUtils.randomInt(0, maxIndexOfNodes), maxIndexOfNodes, recurrent, linkProbability);
			organisms.add(new Organism(0, genome, 1));
		}

		cur_node_id = numberOfInputs + numberOfOutputs + maxIndexOfNodes + 1;
		cur_innov_num = (numberOfInputs + numberOfOutputs + maxIndexOfNodes) * (numberOfInputs + numberOfOutputs + maxIndexOfNodes) + 1;

		EvolutionStrategy.getInstance().getSpeciationStrategy().speciate(this);
	}