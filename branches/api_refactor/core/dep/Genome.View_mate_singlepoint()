//This method was in Ugo's original Genome.java.  It is not called anywhere, and 
//it is not clear what it does, so I decided to move it to dep/ because it was
//just cluttering things up (dtuohy)

	public void View_mate_singlepoint(IGenome g, int genomeid) {

		String mask4 = " 0000";
		DecimalFormat fmt4 = new DecimalFormat(mask4);

		//IGenome new_genome = null;
		int stopA = 0;
		int stopB = 0;
		int j;
		int j1;
		int j2;

		int size1 = genes.size();
		int size2 = g.getGenes().size();

		int crosspoint = 0;

		List<IGene> genomeA;
		List<IGene> genomeB;
		int genecounter = 0; // Ready to count to crosspoint

		if (size1 < size2) {
			stopA = size1;
			stopB = size2;
			genomeA = genes;
			genomeB = g.getGenes();
		} else {
			stopA = size2;
			stopB = size1;
			genomeA = g.getGenes();
			genomeB = genes;
		}

		double v3[][] = new double[size2 * 2][2];
		double vr[] = new double[size2 * 2];

		for (crosspoint = 0; crosspoint < stopA; crosspoint++)
		{

			genecounter = 0;

			boolean doneA = false;
			boolean doneB = false;
			boolean done = false;
			double v1 = 0.0;
			double v2 = 0.0;
			//double vmax = 0.0;
			j1 = 0;
			j2 = 0;
			j = 0;

			double cross_innov = 0;
			//
			// compute what is the hight innovation
			//	

			double last_innovB = ((Gene) genomeB.get(stopB - 1))
					.getInnovationNumber();

			while (!done) {

				doneA = false;
				doneB = false;

				if (j1 < stopA) {
					v1 = ((Gene) genomeA.get(j1)).getInnovationNumber();
					doneA = true;
				}
				if (j2 < stopB) {
					v2 = ((Gene) genomeB.get(j2)).getInnovationNumber();
					doneB = true;
				}

				if (doneA && doneB) {
					//
					if (v1 < v2) {
						v3[j][0] = v1;
						v3[j][1] = 0.0;
						j1++;
					} else if (v1 == v2) {
						v3[j][0] = v1;
						v3[j][1] = v1;
						j1++;
						j2++;
					} else {
						v3[j][0] = 0.0;
						v3[j][1] = v2;
						j2++;
					}
				}

				else {
					if (doneA && !doneB) {
						v3[j][0] = v1;
						v3[j][1] = 0.0;
						j1++;
					} else if (!doneA && doneB) {
						v3[j][0] = 0.0;
						v3[j][1] = v2;
						j2++;
					} else
						done = true;
				}

				if (!done) {

					// -------------------------------------------------------------------------------
					// innovA = innovB
					// -------------------------------------------------------------------------------

					if (v3[j][0] == v3[j][1]) {
						if (genecounter < crosspoint) {
							vr[j] = 1;
							genecounter++;
						} else if (genecounter == crosspoint) {
							vr[j] = 3;
							genecounter++;
							cross_innov = v3[j][0];
						} else if (genecounter > crosspoint) {
							vr[j] = 2;
							genecounter++;
						}
					}

					// -------------------------------------------------------------------------------
					// innovA < innovB
					// -------------------------------------------------------------------------------

					else if (v3[j][0] != 0 && v3[j][1] == 0) {
						if (genecounter < crosspoint) {
							vr[j] = 1; // v3[j][0];
							genecounter++;
						} else if (genecounter == crosspoint) {
							vr[j] = 1; // v3[j][1])
							genecounter++;
							cross_innov = v3[j][0];
						} else if (genecounter > crosspoint) {

							if (cross_innov > last_innovB) {
								vr[j] = 1;
								genecounter++;
							}
						}
					}

					// -------------------------------------------------------------------------------
					// innovA > innovB
					// -------------------------------------------------------------------------------

					else if (v3[j][0] == 0 && v3[j][1] != 0) {
						if (genecounter < crosspoint) {
							vr[j] = 0; // skip v3[j][0];
						} else if (genecounter == crosspoint) {
							vr[j] = 0; // skip
						}

						else if (genecounter > crosspoint) {
							if (cross_innov > last_innovB) {
								vr[j] = 1; // v3[j][1];
								genecounter++;
							} else {
								vr[j] = 2;
								genecounter++;
							}
						}

					}
				}
				j++;

			}

			int len_max = --j;

			//
			// only for debug : view innov's genomeA,B
			//	
			System.out.print("\n\n CROSSING SINGLE at index " + crosspoint);
			System.out.print("\n -- index -- ");
			int column = 0;
			for (j2 = 0; j2 < len_max; j2++) {
				if (v3[j2][0] > 0.0)
					System.out.print(fmt4.format((long) column++));
				else
					System.out.print("     ");
			}
			System.out.print("\n ----------- ");
			for (j2 = 0; j2 < len_max; j2++)
				System.out.print("-----");
			for (j1 = 0; j1 < 2; j1++) {
				System.out.print("\n Genome  [" + j1 + "] ");
				for (j2 = 0; j2 < len_max; j2++)
					System.out.print(fmt4.format((long) v3[j2][j1]));
			}
			System.out.print("\n newgene [X] ");
			for (j2 = 0; j2 < len_max; j2++) {
				if (vr[j2] == 1)
					System.out.print("  AA ");
				else if (vr[j2] == 2)
					System.out.print("  BB ");
				else if (vr[j2] == 3)
					System.out.print("  XX ");
				else if (vr[j2] == 4)
					System.out.print("  MM ");
				else if (vr[j2] == 0)
					System.out.print("  -- ");
			}
			System.out.print("\n");
		}

	}